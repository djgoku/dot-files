* Unbind the =suspend-frame= vs ~suspend-frame~ command.

#+begin_src emacs-lisp :results none
(global-unset-key (kbd "C-x C-z"))
#+end_src

* ~count-duplicate-lines~

This function is similar to ~delete-duplicate-lines~, but this
actually counts the lines and puts the value beside the counted line.

#+begin_src emacs-lisp
(defun count-duplicate-lines ()
  "count duplicate lines"
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (not (eq (point) (point-max)))
      (let* ((current-line-as-string (string-trim-right (thing-at-point 'line t)))
             (current-line-as-string-count (+ 1 (string-width current-line-as-string))) ; adding one since we trim the newline
             (counted (count-matches current-line-as-string))
             (current-point (point)))
        (flush-lines current-line-as-string)
        (insert current-line-as-string (format ",%s" counted) ?\n)))))
#+end_src
#+begin_src emacs-lisp :results none
(when (and (string-equal system-type "gnu/linux") (fboundp 'guix-emacs-autoload-packages))
  (add-to-list 'load-path "~/.guix-profile/share/emacs/site-lisp")
  (guix-emacs-autoload-packages))

(when (or (string-equal system-type "berkley-unix") (and (string-equal system-type "gnu/linux") (fboundp 'guix-emacs-autoload-packages)))
  (use-package exwm :ensure t)
  (require 'exwm)
  (require 'exwm-config)
  (require 'exwm-randr)
  (setq exwm-randr-workspace-output-plist
        '(0 "Virtual-1"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda
              ()
              (start-process-shell-command
               "xrandr" nil "xrandr -s 2560x1800 --output Virtual-1 --auto")))
  (exwm-randr-enable)
  (exwm-config-default)
  (setq exwm-input-global-keys
        `(
          ;; 's-r': Reset (to line-mode).
          ;; ([?\s-r]
          ;;  . exwm-reset)
          ;; 's-&': Launch application.
          ([?\s-&]
           .
           (lambda
             (command)
             (interactive
              (list
               (read-shell-command "$ ")))
             (start-process-shell-command command nil command))))))


; setup directories we need for emacs
(dolist (directory '("auto-saves" "backups" "locks"))
  (unless (file-directory-p (concat user-emacs-directory directory))
    (mkdir (concat user-emacs-directory directory))))

(use-package emacs
  :ensure nil
  :config (recentf-mode t)
  (setq history-length t)
  (setq recentf-max-menu-items 10000)
  (setq recentf-max-saved-items 10000)
  (show-paren-mode 1)
  (setq show-paren-style 'expression)
  (menu-bar-mode -1)
  (if (fboundp 'toggle-scroll-bar)
      (toggle-scroll-bar nil))
  (tool-bar-mode -1)
  (ido-mode -1)
  (global-auto-revert-mode 1)
  (setq make-backup-files nil)
  (setq markdown-command "pandoc")
  (setq-default indent-tabs-mode nil)
  (setq auto-save-no-message t)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
  (electric-pair-mode t)
  (display-time-mode 1)
  (setq display-time-default-load-average nil)
  (setq display-time-format "%F %H:%M - %a")
  (if (or (string-equal system-type "berkley-unix") (string-equal system-type "gnu/linux"))
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "nyxt")
    (setq browse-url-browser-function 'browse-url-default-macosx-browser))
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
  (setq auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory "auto-saves/") t)))
  (setq lock-file-name-transforms `((".*" ,(concat user-emacs-directory "locks/") t)))
  ;; (setq split-window-preferred-function 'split-window-horizontally)
  ;; (add-to-list 'default-frame-alist '(font . "Menlo-10"))
  (setq delete-by-moving-to-trash t)
  (setq initial-major-mode #'org-mode)
  (setq initial-scratch-message "* test\n#+begin_src emacs-lisp\n#+end_src")
  (setq window-combination-resize t)
  (setq use-short-answers t)
  (delete-selection-mode 1)
  (setq-default mode-line-buffer-identification
                (list
                 'buffer-file-name
                 (propertized-buffer-identification "%12f")
                 (propertized-buffer-identification "%12b")))
  ;; this allows for Copying or Renaming across dired buffers
  (setq dired-dwim-target t)
  (setq native-comp-async-report-warnings-errors 'silent)
  (pixel-scroll-precision-mode 1)
  (setq pixel-scroll-precision-use-momentum t)
  (setq native-comp-jit-compilation-deny-list '("git-timemachine"))
  (global-hl-line-mode 1)
  (global-display-line-numbers-mode 1)
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (setq ring-bell-function 'ignore)
  (setq desktop-save t)
  (desktop-save-mode 1)
  :bind (;; Better than default - from /u/zck
         ("M-c" . capitalize-dwim)
         ("M-l" . downcase-dwim)
         ("M-u" . upcase-dwim)
         ("s-a" . mark-whole-buffer)
         ("s-u" . revert-buffer)))

(use-package affe
  :ensure t
  :after orderless
  :config
  (setq affe-count 10000)
  (setq affe-regexp-function #'orderless-pattern-compiler
        affe-highlight-function #'orderless--highlight
        affe-find-command "rg --color=never --files --hidden -g !.git -g !.venv"
        affe-grep-command "rg --null --color=never --max-columns=1000 --no-heading --line-number -v ^$ --hidden -g !.git -g !.venv")
  :bind (("M-s a f" . affe-find)
         ("M-s a g" . affe-grep)))

;; Example configuration for Consult
(use-package consult
  :ensure t
  :bind (("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("s-f" . consult-line))
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format
        consult-async-min-input 1)
  (advice-add #'register-preview :override #'consult-register-window)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<") ;; "C-+"
  )

(use-package marginalia
  :ensure t
  :config (marginalia-mode)
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))

(use-package embark
  :ensure t
  :bind ("M-a" . embark-act))

(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t
  :hook (embark-collect-mode . embark-consult-preview-minor-mode))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless partial-completion basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package vertico
  :ensure t
  :init
  (vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :ensure nil
  :init
  (savehist-mode))

(use-package default-text-scale
  :ensure t
  :config
  :hook (after-init . default-text-scale-mode)
  :bind (("s-=" . default-text-scale-increase)
         ("s--" . default-text-scale-decrease)
         ("C-x C-0" . default-text-scale-reset)))

(use-package wgrep
  :ensure t
  :config (setq wgrep-auto-save-buffer t)
  (setq wgrep-enable-key "r"))

(use-package rg
  :ensure t
  :config (rg-enable-default-bindings)
  (rg-enable-menu))

;;; It is the opposite of fill-paragraph
(defun unfill-paragraph ()
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))

(define-key global-map "\M-Q" 'unfill-paragraph)

;; (use-package exec-path-from-shell
;;   :straight t
;;   :config
;;   (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
;;   (add-to-list 'exec-path-from-shell-variables var))
;;   (when (memq window-system '(mac ns x))
;;     (exec-path-from-shell-initialize)))

;; try to setup spell-fu on macOS so we can remove these guards.
(when (string-equal system-type "gnu/linux")
  (use-package spell-fu :ensure t))
(when (string-equal system-type "gnu/linux")
  (add-hook 'org-mode-hook (lambda ()
                             (setq spell-fu-faces-exclude '(org-block-begin-line org-block-end-line
                                                                                 org-code org-date
                                                                                 org-drawer
                                                                                 org-document-info-keyword
                                                                                 org-ellipsis org-link
                                                                                 org-meta-line
                                                                                 org-properties
                                                                                 org-properties-value
                                                                                 org-special-keyword
                                                                                 org-src org-tag
                                                                                 org-verbatim))
                             (spell-fu-mode))))
(when (string-equal system-type "gnu/linux")
  (add-hook 'emacs-lisp-mode-hook (lambda () (spell-fu-mode))))

(use-package magit
  :ensure t
  :after project
  :init (add-to-list 'project-switch-commands '(magit-project-status "Magit" "m"))
  :bind (("C-x g" . magit-project-status))
  :config
  ;; setting to level 5 for gpg siging
  (setq transient-default-level 5))

(setq johnny5-package-list
      '(deadgrep
        define-word
        docker
        elfeed
        git-link
        git-timemachine
        htmlize
        ipcalc
        jeison
        json-mode
        kubel
        markdown-mode
        nix-mode
        ob-elixir
        org-chef
        org-contrib
        org-jira
        org-ql
        orgit
        ox-jira
        powerthesaurus
        sideline-blame
        sideline-flymake
        string-inflection
        transient))

(dolist (package johnny5-package-list)
  (eval `(use-package ,package :ensure t) t))

(use-package git-identity
  :ensure t
  :after magit
  :config (git-identity-magit-mode 1)
  (define-key magit-status-mode-map (kbd "I") 'git-identity-info)
  :custom (git-identity-verify t))

;; (org-narrow-to-subtree) C-x n s
;; (widen) C-x n w
(use-package org
  :ensure nil
  :bind (("C-c c" . 'org-capture)
         ("C-c a" . 'org-agenda))
  :config (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-edit-src-content-indentation t)
  (setq org-log-into-drawer t)
  ;; NOT-RETAINED - will not continue in the application process
  (setq org-todo-keywords '((sequence "TODO(t!)" "IN-PROGRESS(i!)" "WAIT(w!)" "APPLIED(a!)" "|" "DONE(d@)"
                                      "CANCELED(@)" "WITHDRAWN(@)" "FILLED" "HIRED" "NOT-RETAINED(n@)")))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
  (setq org-agenda-files '("~/dev/org" "~/dev/notes"))
  ;; (setq org-agenda-include-inactive-timestamps 't)
  (setq org-log-refile 'note)
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-startup-indented t)
  (add-hook 'auto-save-hook 'org-save-all-org-buffers)
  (progn
    (defun imalison:org-inline-css-hook (exporter)
      "Insert custom inline css to automatically set the
  background of code to whatever theme I'm using's background"
      (when (eq exporter 'html)
        (let* ((my-pre-bg (face-background 'default))
               (my-pre-fg (face-foreground 'default)))
          (setq org-html-head-extra (concat org-html-head-extra (format
                                                                 "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                                                                 my-pre-bg my-pre-fg))))))
    (add-hook 'org-export-before-processing-hook 'imalison:org-inline-css-hook))
  :mode (("\\.org$" . org-mode)))

(setq org-capture-templates '(("t" "Todo" entry (file "~/dev/org/inbox.org")
                               "* TODO %? [/]\n:PROPERTIES:\n:Created: %U\nEND:\n %i\n %a")
                              ("c" "Cookbook" entry (file "~/dev/org/cookbook.org")
                               "%(org-chef-get-recipe-from-url)"
                               :empty-lines 1)
                              ("m" "Manual Cookbook" entry (file "~/dev/org/cookbook.org")
                               "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")))

(require 'ox-md nil t)
(org-babel-do-load-languages 'org-babel-load-languages '((awk . t)
                                                         (emacs-lisp . t)
                                                         (eshell . t)
                                                         ;; (elixir . t)
                                                         (perl . t)
                                                         (python . t)
                                                         (sed . t)
                                                         (shell . t)
                                                         (sql . t)
                                                         (ruby . t)))

;; just add :async to any org babel src blocks!
(use-package ob-async
  :ensure t
  :config (require 'ob-async))

(use-package denote
  :ensure t
  :config
  (setq denote-directory "~/dev/notes"))

;; (use-package org-download
;;   :straight t
;;   :after org
;;   :defer nil
;;   :custom
;;   (org-download-method 'directory)
;;   (org-download-image-dir "images")
;;   (org-download-heading-lvl nil)
;;   (org-download-timestamp "%Y%m%d-%H%M%S_")
;;   (org-image-actual-width 300)
;;   (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
;;   :bind
;;   ("C-M-y" . org-download-screenshot)
;;   :config
;;   (require 'org-download))

(setq treesit-extra-load-path '("~/dev/github/casouri/tree-sitter-module/dist"))
(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

;; M-. xref-find-definitions
;; M-, xref-go-back
;; M-? xref-find-references
(use-package eglot
  :ensure t
  :config
  ;; else eglot + python will not work well
  ;; https://github.com/joaotavora/eglot/discussions/1226#discussioncomment-6010670
  (add-to-list 'project-vc-ignores "./.venv/")
  (setq eldoc-echo-area-use-multiline-p t)
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 `((elixir-ts-mode heex-ts-mode elixir-mode) .
                   ("nextls" "--stdio=true" :initializationOptions (:experimental (:completions (:enable t)))))))
  (add-to-list 'eglot-server-programs '(nix-mode . ("rnix-lsp")))
  (add-to-list 'eglot-server-programs
               '((python-mode python-ts-mode) "pyright-langserver" "--stdio"))
  (add-to-list 'eglot-server-programs '(terraform-mode "terraform-ls" "serve"))
  :hook ((elixir-mode . eglot-ensure)
         (elixir-ts-mode . eglot-ensure)
         (heex-ts-mode . eglot-ensure)
         (python-mode . eglot-ensure)
         (python-ts-mode . eglot-ensure)
         (nix-mode . eglot-ensure)
         (terraform-mode . eglot-ensure))
  :bind(:map eglot-mode-map
             ("C-c l r" . eglot-rename)
             ("C-c l a" . eglot-code-actions)
             ("M-n" . flymake-goto-next-error)
             ("M-p" . flymake-goto-prev-error))
  :custom
  ;; Shutdown server after buffer kill
  (eglot-autoshutdown t)
  ;; Enable eglot in code external to project
  (eglot-extend-to-xref t))

(use-package company
  :ensure t
  :hook
  (prog-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
	company-idle-delay 0.0
	company-backends '((company-capf company-dabbrev-code))
        company-dabbrev-minimum-length 2
        company-occurrence-weight-function #'company-occurrence-prefer-any-closest))

;; (use-package
;;   eglot-grammarly
;;   :straight (:host github
;;                    :repo "emacs-grammarly/eglot-grammarly")
;;   :hook ((text-mode markdown-mode org-mode). (lambda ()
;;                                                (require 'eglot-grammarly)
;;                                                (eglot-ensure))))

;; (setq
;;  eglot-server-programs
;;  '((elixir-mode
;;     .
;;     ("~/dev/github/elixir-lsp/elixir-ls/release/language_server.sh"))
;;     ((text-mode latex-mode org-mode markdown-mode) eglot-grammarly-server
;;     "node"
;;     "~/node_modules/\@emacs-grammarly/grammarly-languageserver/bin/server.js"
;;     "--stdio"))
;;    ))

;; (use-package
;;  eglot-ltex
;;  :straight (:host github :repo "emacs-languagetool/eglot-ltex")
;;  :hook ;; (text-mode . (lambda () (require 'eglot-ltex) (call-interactively #'eglot)))
;;  ;; (org-mode . (lambda ()
;;  ;;               (require 'eglot-ltex
;;  ;;                        (call-interactively #'eglot))))
;;  (markdown-mode
;;   .
;;   (lambda ()
;;     (require 'eglot-ltex (call-interactively #'eglot))))
;;  :init
;;  (setq
;;   eglot-languagetool-server-path
;;   "/home/johnny/lsp/ltex-ls-15.2.1-alpha.1.nightly.2022-11-04"))

;; TODO
;; (add-to-list 'eglot-server-programs
;;              '((web-mode :language-id "html")
;;                .
;;                ("/home/johnny/node_modules/@tailwindcss/language-server/bin/tailwindcss-language-server")))
;; npm install -g @tailwindcss/language-server

(use-package which-key
  :ensure t
  :config (which-key-mode))

(use-package switch-window
  :ensure t
  :bind (("C-x o" . switch-window))
  :config (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-minibuffer-shortcut ?z))

;; (use-package
;;   tramp)

;; ;; (defun crontab-e ()
;; ;;     "Run `crontab -e' in a emacs buffer."
;; ;;     (interactive)
;; ;;     (with-editor-async-shell-command "crontab -e"))

(use-package multiple-cursors
  :ensure t
  :config (setq mc/always-run-for-all 1)
  (define-key mc/keymap (kbd "<return>") nil)
  :bind (("s-d" . mc/mark-next-like-this)
         ("s-D" . mc/mark-all-dwim)
         ("M-s-d" . mc/edit-beginnings-of-lines)))

(use-package avy
  :ensure t
  :bind (("M-j" . avy-goto-char-timer)))

(unless (getenv "EARTHLY")
  (use-package vterm
    :ensure nil
    :config (setq vterm-buffer-name-string "vterm %s")
    (setq vterm-kill-buffer-on-exit nil)
    (setq vterm-max-scrollback 100000)
    (setq vterm-use-vterm-prompt-detection-method t)
    (setq vterm-always-compile-module t)
    (add-to-list 'vterm-eval-cmds '("update-pwd" (lambda (path)
                                                   (setq default-directory path))))))


(defun screenshot-svg ()
  "Save a screenshot of the current frame as an SVG image.
  Saves to a temp file and puts the filename in the kill ring."
  (interactive)
  (let* ((filename (make-temp-file "Emacs" nil ".png"))
         (data (x-export-frames nil 'png)))
    (with-temp-file filename
      (insert data))
    (kill-new filename)
    (message filename)))

(use-package elisp-demos
  :ensure t
  :init
  (advice-add 'describe-function-1 :after #'elisp-demos-advice-describe-function-1))

(use-package envrc
  :ensure t
  :config (envrc-global-mode))

(use-package pdf-tools
  :ensure t
  :defer t
  :magic ("%PDF" . pdf-view-mode) ;; https://github.com/jwiegley/use-package#magic-handlers
  :config
  (pdf-loader-install)
  (setq pdf-view-use-scaling t))

(use-package inheritenv
  :ensure (:type git :host github :repo "purcell/inheritenv"))

(use-package buffer-env
  :ensure t
  :hook (hack-local-variables . buffer-env-update)
  :config (setq buffer-env-script-name '(".envrc" ".venv/bin/activate")))

(use-package buffer-name-relative
  :ensure t
  :init
  (setq buffer-name-relative-prefix '("<" . ">/"))
  (buffer-name-relative-mode))

(use-package sideline
  :ensure t
  :init
  (setq sideline-flymake-display-mode 'line
        sideline-backends-right '(sideline-flymake sideline-blame)
        sideline-backends-skip-current-line t  ; don't display on current line
        sideline-format-left "%s   "           ; format for left aligment
        sideline-format-right "   %s"          ; format for right aligment
        sideline-priority 100                  ; overlays' priority
        )
  :config
  (global-sideline-mode 1))

(use-package apheleia
  :ensure t
  :config
  (apheleia-global-mode +1)
  (require 'cl-lib)
  ;; https://github.com/radian-software/apheleia/issues/153
  (cl-defun apheleia-indent-eglot-managed-buffer
      (&key buffer scratch callback &allow-other-keys)
    "Copy BUFFER to SCRATCH, then format scratch, then call CALLBACK."
    (with-current-buffer scratch
      (setq-local eglot--cached-server
                  (with-current-buffer buffer
                    (eglot-current-server)))
      (let ((buffer-file-name (buffer-local-value 'buffer-file-name buffer)))
        (eglot-format-buffer))
      (funcall callback)))
  (add-to-list 'apheleia-formatters
               '(eglot-managed . apheleia-indent-eglot-managed-buffer)))

(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))

(use-package burly
  :ensure (:type git :host github :repo "alphapapa/burly.el"))

(use-package winner
  :ensure nil
  :init
  (setq winner-dont-bind-my-keys t)
  (setq winner-boring-buffers '("*Completions*" "*Help*" "*Apropos*" "*Buffer List*" "*info*" "*Compile-Log*"))
  :config
  (winner-mode 1)
  :bind (("M-s-<left>" . winner-undo)
         ("M-s-<right>" . winner-redo)))

(elpaca-wait)

(when (file-exists-p (locate-user-emacs-file "custom.el"))
  (load custom-file))
#+end_src
